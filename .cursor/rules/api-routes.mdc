---
globs: **/api/**/*.ts
---

# API Routes

API routes follow Next.js App Router conventions in [src/app/api/](mdc:src/app/api/).

## Authentication

All API routes must authenticate users using Stack Auth:

```typescript
import { stackServerApp } from "@/lib/stack/server";

export async function POST(req: Request) {
  const user = await stackServerApp.getUser({ or: "redirect" });
  
  // Proceed with authenticated user
}
```

## Chat API Pattern

Reference [src/app/api/chat/route.ts](mdc:src/app/api/chat/route.ts) for AI streaming:

```typescript
import { openai } from "@ai-sdk/openai";
import { streamText, convertToModelMessages } from "ai";
import { frontendTools } from "@assistant-ui/react-ai-sdk";

export const maxDuration = 30; // Required for streaming

export async function POST(req: Request) {
  const user = await stackServerApp.getUser({ or: "redirect" });
  const { messages, tools } = await req.json();

  const result = streamText({
    model: openai("gpt-4o"),
    messages: convertToModelMessages(messages),
    system: `You are a helpful assistant. Context: ${user.displayName}`,
    tools: {
      ...frontendTools(tools),
      // Add backend-only tools here
    },
  });

  return result.toUIMessageStreamResponse();
}
```

## Route Conventions

- Use named exports: `GET`, `POST`, `PUT`, `DELETE`, `PATCH`
- Return `Response` objects or Next.js response helpers
- Set `maxDuration` for long-running operations (Cloudflare limit)

```typescript
export async function GET(req: Request) {
  const user = await stackServerApp.getUser({ or: "redirect" });
  
  return Response.json({ data: "value" });
}

export async function POST(req: Request) {
  const body = await req.json();
  
  return new Response("Success", { status: 200 });
}
```

## Error Handling

```typescript
export async function POST(req: Request) {
  try {
    const user = await stackServerApp.getUser({ or: "redirect" });
    // ... operation
    return Response.json({ success: true });
  } catch (error) {
    console.error("API Error:", error);
    return Response.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}
```

## Environment Variables

- Access via `process.env.VARIABLE_NAME`
- Prefix client-side variables with `NEXT_PUBLIC_`
- Deploy secrets using: `wrangler secret bulk .env`

## AI SDK Integration

Available AI SDK providers and tools:
- `@ai-sdk/openai` - OpenAI models
- `ai` - Core streaming utilities
- `@assistant-ui/react-ai-sdk` - Frontend tools integration

Backend tools can be added alongside `frontendTools()` for server-side capabilities.
