---
description: Assistant UI integration and chat patterns
---

# Assistant UI Integration

This project uses Assistant UI for AI chat functionality with cloud persistence.

## Core Setup

The main Assistant component is defined in [src/lib/assistant.tsx](mdc:src/lib/assistant.tsx):

```typescript
"use client";

import { AssistantRuntimeProvider } from "@assistant-ui/react";
import { useChatRuntime } from "@assistant-ui/react-ai-sdk";
import { AssistantCloud } from "@assistant-ui/react";

export const Assistant = () => {
  const cloud = new AssistantCloud({
    baseUrl: process.env.NEXT_PUBLIC_ASSISTANT_BASE_URL!,
    authToken: () =>
      fetch("/api/chat/token", { method: "POST" }).then((r) =>
        r.json().then((data: any) => data.token),
      ),
  });

  const runtime = useChatRuntime({
    cloud,
  });

  return (
    <AssistantRuntimeProvider runtime={runtime}>
      {/* Your UI components */}
    </AssistantRuntimeProvider>
  );
};
```

## Custom Components

Assistant UI components are in [src/components/assistant-ui/](mdc:src/components/assistant-ui/):

- **[thread.tsx](mdc:src/components/assistant-ui/thread.tsx)** - Main chat thread with message display
- **[thread-list.tsx](mdc:src/components/assistant-ui/thread-list.tsx)** - Sidebar showing chat history
- **[markdown-text.tsx](mdc:src/components/assistant-ui/markdown-text.tsx)** - Markdown message rendering
- **[attachment.tsx](mdc:src/components/assistant-ui/attachment.tsx)** - File attachment handling
- **[tool-fallback.tsx](mdc:src/components/assistant-ui/tool-fallback.tsx)** - Fallback UI for tools
- **[tooltip-icon-button.tsx](mdc:src/components/assistant-ui/tooltip-icon-button.tsx)** - Icon button with tooltip

## Backend Integration

The chat API endpoint ([src/app/api/chat/route.ts](mdc:src/app/api/chat/route.ts)) handles streaming:

```typescript
import { openai } from "@ai-sdk/openai";
import { streamText, convertToModelMessages } from "ai";
import { frontendTools } from "@assistant-ui/react-ai-sdk";

export const maxDuration = 30;

export async function POST(req: Request) {
  const user = await stackServerApp.getUser({ or: "redirect" });
  const { messages, tools } = await req.json();

  const result = streamText({
    model: openai("gpt-4o"),
    messages: convertToModelMessages(messages),
    system: `You are a helpful assistant. You are currently talking to ${getUserName(user)}`,
    tools: {
      ...frontendTools(tools), // Client-side tools
      // Add server-side tools here
    },
  });

  return result.toUIMessageStreamResponse();
}
```

## Available Packages

- `@assistant-ui/react` - Core Assistant UI components and runtime
- `@assistant-ui/react-ai-sdk` - Integration with Vercel AI SDK
- `@assistant-ui/react-markdown` - Markdown rendering support
- `ai` - Vercel AI SDK for streaming and tool calling

## Adding Tools

### Frontend Tools

Tools that run in the browser (e.g., UI actions):

```typescript
const runtime = useChatRuntime({
  cloud,
  tools: {
    myTool: {
      description: "Does something in the UI",
      parameters: z.object({
        param: z.string(),
      }),
      execute: async ({ param }) => {
        // Client-side logic
        return { result: "success" };
      },
    },
  },
});
```

### Backend Tools

Tools that run on the server (e.g., database queries, API calls):

```typescript
// In src/app/api/chat/route.ts
const result = streamText({
  model: openai("gpt-4o"),
  messages: convertToModelMessages(messages),
  tools: {
    ...frontendTools(tools),
    serverTool: {
      description: "Server-side operation",
      parameters: z.object({
        query: z.string(),
      }),
      execute: async ({ query }) => {
        const data = await db.query.posts.findMany();
        return { data };
      },
    },
  },
});
```

## Cloud Persistence

- Assistant UI Cloud stores chat history
- Configuration: `NEXT_PUBLIC_ASSISTANT_BASE_URL`
- Auth token fetched from `/api/chat/token`
- Threads automatically sync across devices

## Markdown Support

Uses `remark-gfm` for GitHub Flavored Markdown in chat messages:
- Tables
- Task lists
- Strikethrough
- Autolinks

## Styling

Assistant UI components use Tailwind CSS classes and integrate with the Shadcn UI design system. Customize in [src/components/assistant-ui/](mdc:src/components/assistant-ui/) files.
